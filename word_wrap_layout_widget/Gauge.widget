@class Gauge(  Wheel  )


@CLASSVARS
@var XtEnum compress_exposure = TRUE
@var Atom XA_UTF8_STRING = 0

@PUBLIC
@var String label = <String> "Hello World How are you?"
@var int cornerRoundPercent = "20"
@var int timer = <String> "2000"
    
@PRIVATE
@var XftDraw *draw
@var Pixmap pixmap
@var GC gc_copy
@var int prefered_width
@var int prefered_height
@var XtIntervalId tmr
@var int xl2
@var int do_init

@METHODS

@proc initialize
{
    TRACE(1, "Gauge");
    $pixmap = 0;
    $draw = 0;
    $gc_copy =  XtGetGC($, 0,0 );
    if( $width == 0 )  $width = 10; 
    if( $height == 0 ) $height = 10;
    $prefered_width=$width;
    $prefered_height=$height;
    calculate_size($);
    if(! $XA_UTF8_STRING )
	$XA_UTF8_STRING = XInternAtom(XtDisplay($), "UTF8_STRING", True);
    $tmr=0;
    $do_init=1;
}

@proc realize
{
        TRACE(1, "Gauge");
        XtCreateWindow($, (unsigned int) InputOutput,
        		  (Visual *) CopyFromParent, *mask, attributes);
  	reshape_widget($);
}

@proc resize
{
    TRACE(1, "Gauge resize");	
    $do_init=1; /* wait for next expose event */
}


@proc destroy
{
    TRACE(1, "Gauge destroy");
    if( $draw) XftDrawDestroy( $draw );
    $draw = 0;
    XtReleaseGC($,$gc_copy);
    if( $pixmap ) XFreePixmap(XtDisplay($),$pixmap);
    $pixmap = 0;	
    stop_timer($);
}

@proc set_values
{
	return True;
}

@proc expose
{
	TRACE(1, "Gauge");

	/* filter bad events */
	if( !XtIsRealized($)) return;
    	if( $width > 4095  || $height > 4095 ||
    	    $width < 10 || $height < 10 ) return;
	
	/* init if necc. */
	if( $do_init ) {
	    re_initialize($);
	    $do_init = 0;
	}

	/* finally draw this widget */
	redraw($);
}


@ parameter list ($, int cmd, int val)
@proc int exec_command
{
  return 0;
}


@ When our parent asks for this widget's preferred geometry,
simply return the geometry as wanted
Currently, the method always returns |XtGeometryAlmost|. It doesn't bother
to check if the preferred geometry is equal to the current geometry (in
which case it should really return |XtGeometryNo|) or if the preferred
geometry is equal to what the parent proposed (in which case a return of
|XtGeometryYes| should have been given.

It seems that no harm is done by always returning |XtGeometryAlmost| and
letting Xt figure out what really needs to be changed.

@proc query_geometry
{
    reply->request_mode = CWX | CWY | CWWidth | CWHeight;
    calculate_size($);
    reply->x=0; reply->y=0;
    reply->width =  $prefered_width;
    reply->height = $prefered_height;

    TRACE(1, "Gauge:%s: parent request is: %dx%d", XtName($),
             request->width,
             request->width );

    TRACE(1, "Gauge:%s: our prefered size is %dx%d", XtName($),
                  $prefered_width,
                  $prefered_height );

    return XtGeometryAlmost;
}


@UTILITIES

@proc reshape_widget($)
{
	int w;
	if( $cornerRoundPercent >0 && $cornerRoundPercent < 100 ) {
	    w = Min($height,$width);
	    w = w * $cornerRoundPercent / 100;
	    XmuReshapeWidget( $, XmuShapeRoundedRectangle, w, w );
	}
}


@ alloc a pixmap with size of this window
  called by update cache if pixmap==0
@proc alloc_pixmap($)
{
    TRACE(1, "Gauge");
    Display *dpy = XtDisplay($);
    if( $pixmap ) {
    	int err = XFreePixmap(XtDisplay($),$pixmap);
	TRACE(2,"XFREE: %d", err);
    }
    TRACE(2,"Gauge:%s size:%dx%d", XtName($),  $width, $height );
    TRACE(2, "XCREATE");
    $pixmap = XCreatePixmap(dpy, XtWindow($), $width, $height,
                            DefaultDepth(dpy, DefaultScreen(dpy)));
    TRACE(2, "XCREATE:%d", $pixmap);

    if( $draw ) {
        XftDrawChange($draw, $pixmap );
    }
    else {
        TRACE(2, "XDRAWCREATE");
        $draw = XftDrawCreate(dpy, $pixmap,
                       DefaultVisual(dpy, DefaultScreen(dpy)), None);
    }

    if( !$xftFont ) 
        $xftFont = XftFontOpenName( dpy,DefaultScreen(dpy), "Sans-8" ); 



}

@ outputs a simple string on the window cache pixmap
@proc str_print($, int x, int y, char *s )
{
   if( is_empty(s) ) return;
   XftDrawStringUtf8($draw, $xft_col + $state, $xftFont,
    			     x,y+$xftFont->ascent, (FcChar8*)s, strlen(s) );
}
					       
@ redraws everything on pixmap cache
@proc re_initialize($)
{
    TRACE(1,"Gauge:%s size:%dx%d", $name, $width, $height );
    alloc_pixmap($);
    /* clear background */
    XFillRectangle(XtDisplay($),$pixmap, $gc[$state], 0,0,$width,$height );
    XRectangle r = { 0,0, $width, $height };
    xl2_draw_centered($xl2, $draw, &r);
}


@proc redraw($)
{
   TRACE(1, "Gauge");
    if( ! $tmr ) start_timer($);

    XCopyArea(XtDisplay($),$pixmap, XtWindow($), $gc_copy,
              0,0, $width, $height, /* source pixmap */
              0,0 ); /* target window x,y */
}

@proc calculate_size($)
{

	int w,h;
	
	$xl2 = xl2_init( $, $xftFont,
		 & $xft_col[COLOR_FG_NORM],
 		 & $xft_col[COLOR_BG_NORM],
		 $label
		  );	
		  		  		

/*
	xft_calc_string_size( $ , $xftFont, $label, &w, &h );

	if( $prefered_width < w + 4 ) 	
	    $prefered_width = w+4;

	if( $prefered_height < (h*2+4) 	)
	    $prefered_height = (h+2) * 2;
*/
}




@proc stop_timer($)
{
   if( $tmr ) {
     XtRemoveTimeOut($tmr);
     $tmr=0;
   }
}

@proc start_timer($)
{
    $tmr = XtAppAddTimeOut( XtWidgetToApplicationContext($), 1000, 
         (XtTimerCallbackProc)timer_cb, $);
}

@proc timer_cb($, XtIntervalId *id)
{

    $tmr = XtAppAddTimeOut( XtWidgetToApplicationContext($), 1000, 
          (XtTimerCallbackProc)timer_cb, $);

    /* redraw($); */

}




@IMPORTS
@incl <X11/Xatom.h>
@incl <X11/Xft/Xft.h>
@incl "converters-xft.h"
@incl <X11/Xmu/Converters.h>
@incl "mls.h"
@incl "xutil.h"
@incl "xlayout.h"
@incl "xl2.h"
