@class Gauge(  Core  )


@CLASSVARS
@var XtEnum compress_exposure = TRUE
@var Atom XA_UTF8_STRING = 0

@PUBLIC
@var String label =     <String> "Hello"
@var int lang     =     0
@var String fontName =  <String> "Source Code Pro-22"
@var Pixel background = <String> "Darkgrey"
@var Pixel foreground = <String> XtDefaultForeground

@PRIVATE
@var XftFont *xftFont
@var XftDraw *draw
@var XftColor xftColor
@var Pixmap pixmap
@var GC gc_copy
@var GC gc_bg
@var int prefered_width
@var int prefered_height

@METHODS

@proc initialize
{
    TRACE(1, "Gauge");
    Display *dpy = XtDisplay($);
    $pixmap = 0;
    $draw = 0;
    $gc_copy =  XtGetGC($, 0,0 );
    $gc_bg = 0;

    /* load font unsing pattern */
    $xftFont = XftFontOpenName(
                       dpy,
                       DefaultScreen(dpy),
                       $fontName );
		      

    if( $width == 0 )  $width = 10; 
    if( $height == 0 ) $height = 10;
    calculate_size($);
    if(! $XA_UTF8_STRING )
	$XA_UTF8_STRING = XInternAtom(XtDisplay($), "UTF8_STRING", True);
}

@proc realize
{
        TRACE(1, "Gauge");
        XtCreateWindow($, (unsigned int) InputOutput,
        		  (Visual *) CopyFromParent, *mask, attributes);
}

@proc resize
{
        TRACE(1, "Gauge");	
    	if (XtIsRealized($)) {
       	   if( $width > 4096 || $height > 4096 || $width < 10 || $height < 10 ) return;
           alloc_pixmap($);
    	}
}


@proc destroy
{
	TRACE(1, "Gauge");
    	if( $draw) { XftDrawDestroy( $draw ); $draw=0; }
    	XtReleaseGC($,$gc_copy); $gc_copy=0;
    	XFreePixmap(XtDisplay($),$pixmap); $pixmap=0;
}

@proc set_values
{
	TRACE(1, "Gauge");
	return True;
}

@proc expose
{
	TRACE(1, "Gauge");	
    	redraw($);
}

@ When our parent asks for this widget's preferred geometry,
simply return the geometry as wanted
Currently, the method always returns |XtGeometryAlmost|. It doesn't bother
to check if the preferred geometry is equal to the current geometry (in
which case it should really return |XtGeometryNo|) or if the preferred
geometry is equal to what the parent proposed (in which case a return of
|XtGeometryYes| should have been given.

It seems that no harm is done by always returning |XtGeometryAlmost| and
letting Xt figure out what really needs to be changed.

@proc query_geometry
{
	calculate_size($);

    	reply->request_mode = CWX | CWY | CWWidth | CWHeight;
    	    reply->x=0; reply->y=0;
    	    reply->width =  $prefered_width;
    	    reply->height = $prefered_height;

    	TRACE(1, "Gauge:%s: parent request is: %dx%d", XtName($),
             request->width,
             request->width );

    	TRACE(1, "Gauge:%s: our prefered size is %dx%d", XtName($),
                  $prefered_width,
                  $prefered_height );

	return XtGeometryAlmost;
}


@UTILITIES

@ called by update cache if pixmap==0
@proc alloc_pixmap($)
{
	TRACE(1, "Gauge");
    	Display *dpy = XtDisplay($);
    	if( $pixmap ) {
		int err = XFreePixmap(XtDisplay($),$pixmap);
	    	$pixmap=0;
	}
    	TRACE(2,"Gauge:%s size:%dx%d", XtName($),  $width, $height );

    	$pixmap = XCreatePixmap(dpy, XtWindow($), $width, $height,
			DefaultDepth(dpy, DefaultScreen(dpy)));
			
    	if( $draw ) {
		XftDrawChange($draw, $pixmap );
    	}
    	else {
                $draw = XftDrawCreate(dpy, $pixmap,
                       DefaultVisual(dpy, DefaultScreen(dpy)), None);
    	}

	/* alloc gc to clear the pixmap with background color */
	if( $gc_bg ) {
	    XtReleaseGC( $, $gc_bg );  $gc_bg=0;
	}
	XGCValues     values;
	values.foreground = $background;
	$gc_bg = XtGetGC($, GCForeground, &values);

	/* copy bits from $background(int) to struct xftColor */
    	xft_color_alloc( $, $foreground, & $xftColor );

	static int first_run = 1;
	if( first_run ) {
	     first_run = 0;

        }

}

					       
@ redraws everything on pixmap cache
@proc update_cache($)
{
    TRACE(1, "Gauge");
    if( $pixmap == 0 ) alloc_pixmap($);

    TRACE(1,"Gauge:%s size:%dx%d", $name, $width, $height );

    /* clear background */
    XFillRectangle(XtDisplay($),$pixmap, $gc_bg, 0,0,$width,$height );
    write_to_pixmap( XtDisplay($), $pixmap, $foreground, $xftFont, $width, $height,
     $lang, $label, 0, 0 );
    return;

}


@proc redraw($)
{
    TRACE(1, "Gauge");
    if( !XtIsRealized($)) return;
    update_cache($);
    XCopyArea(XtDisplay($),$pixmap, XtWindow($), $gc_copy,
              0,0, $width, $height, /* source pixmap */
              0,0 ); /* target window x,y */
}

@proc calculate_size($)
{
	int w,h;
	hb_measure( XtDisplay($), $xftFont, $lang, $label, &w, &h );
	$prefered_width  = w + 4;
	$prefered_height = h + 4;
}


@IMPORTS
@incl <X11/Xatom.h>
@incl <X11/Xft/Xft.h>
@incl "converters-xft.h"
@incl <X11/Xmu/Converters.h>
@incl "mls.h"
@incl "xutil.h"
@incl "hb-example.h"

