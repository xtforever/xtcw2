@class Wls (Gridbox)
@ listbox mit slider

@PUBLIC
@var StringMArray lst = <String> "Hello,World,who,are,you,tell,me,you,could,speak,or,remain,silent,you,could,also,take,a,flight,to,miami"
@var String svar = <String> "dummy"
@var String value = <String> "dummy"
@var <Callback> XtCallbackList callback  = NULL

@PRIVATE
@var Widget slider
@var Widget list
@var int list_height
@var int ignore_cb

@METHODS
@proc initialize
{
	XtVaSetValues( $, "defaultDistance", 0,
	/* "borderWidth", 0, */
	NULL );
	
        do_layout($);
}

@proc destroy
{
        m_free_strings($lst,0);
}

@proc expose
{
	adjust_slider_size($);	
}

@UTILITIES
@proc adjust_slider_size($)
{
	int line_max; /* anzahl zeilen */
	int list_height; /* sichtbarer bereich */
	int line_height; /* pixel zeile */
	int first_line; /* erste sichtbare zeile */
	XtVaGetValues($list,
		"line_max", &line_max,
		"list_height", &list_height,
		"line_height", &line_height,
		"top_y", &first_line,
		NULL );

	wls_set_slider_pos( $slider,
	  list_height,
	  line_max * line_height,
	  first_line
	);

	$list_height = line_max * line_height;

	TRACE(9, "%d %d %d %d", line_max, list_height,line_height,first_line  );
}


@proc do_layout($)
{
	int act;
        Widget w;
        int i;
        char *grid = "gridx";
        for( i=0; i<$num_children;i++ )
             XtDestroyWidget($children[0]);

	XtVaCreateManagedWidget( "hello-world1",
                wlabelWidgetClass, $,
                "gridy", 1,
                "label", "hello-World",
		"gridWidth", 2,
                NULL );

	$list = XtVaCreateManagedWidget( "hello-world2",
                wlistWidgetClass, $,
                "gridx", 0,
                "label", "hello-World",
		"gridWidth", 1,
		"weightx", 100,
		"tableStrs", $lst,
		"height", 120,
                NULL );
		
	XtAddCallback($list, "updatecb", (XtCallbackProc)list_changed_cb, $ );			

	 $slider=XtVaCreateManagedWidget( "hello",
                woptcWidgetClass, $,
                "gridx", 1,
                "label", "h",
		"gridWidth", 1,
		"weightx", 0,
                NULL );

	XtAddCallback($slider, "callback", (XtCallbackProc)slider_changed_cb, $ );
}

@UTILITIES
@proc update_cb(Widget dummy, $, void *class_data )
{
	XtCallCallbackList( $, $callback, class_data );
}

@proc slider_changed_cb(Widget sender, $, void *class_data )
{
	if( $ignore_cb ) return;
	float new_pos = *(float *) class_data;
	TRACE(9, "list pos rel: %f", new_pos );

	new_pos = $list_height * 1.0 * new_pos;
	$ignore_cb = 1;
	wlist_gotoxy($list,0, (int) new_pos );
	$ignore_cb = 0;

}


@proc list_changed_cb(Widget sender, $, void *class_data )
{
	if( $ignore_cb ) return;
	$ignore_cb = 1;
	adjust_slider_size($);
	$ignore_cb = 0;
}

@IMPORTS


@incl "converters.h"
@incl "mls.h"
@incl "xtcw/Wlist.h"
@incl <xtcw/Wlabel.h>
@incl "xtcw/Woptc.h"
