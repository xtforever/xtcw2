@class Woptc (Core)
@ Rectangle Slider

@PUBLIC
@var Pixel foreground = XtDefaultForeground
@var int lineWidth = 1
@var Boolean filled = False
@var float frac = <String> "0.1"
@var float pos = <String> "0.1"
@var <Callback> XtCallbackList callback   = NULL
@var Distance sliderWidth = <String> "4mm"

@PRIVATE
@var GC gc_background
@var GC gc_fg
@var int resize
@var int slh
@var int sly


@CLASSVARS
@ The Core variable |compress_exposure| is OR'ed with
|XtExposeGraphicsExpose|, in order to get graphics expose events delivered
to the |expose| method.
var compress_exposure = XtExposeCompressMultiple OR XtExposeGraphicsExpose
var compress_motion = True
@var visible_interest = False



@exports
@proc void wls_set_slider_pos(Widget w, int vis, int max, int first )
{
  WoptcWidgetClass wc = (WoptcWidgetClass)XtClass(w);
  if( XtIsSubclass( w, woptcWidgetClass) )
    {
       set_slider_pos(w,vis,max,first);
    }
}




@METHODS
@proc initialize
{
  XGCValues     values = {
  		foreground: $background_pixel,
  		graphics_exposures: False,
                line_width: $lineWidth };
  uint          mask = GCForeground | GCGraphicsExposures |  GCLineWidth;
  $gc_background = XtGetGC($, mask, &values);
  values.foreground = $foreground; 
  $gc_fg = XtGetGC($,mask,&values);
  if( $width == 0 ) $width=$sliderWidth;
  if( $height == 0 ) $height=10;
  $resize = 1;
  $sly = 0;
}

@proc set_values
{
  return True; /* redraw */
}


@proc destroy
{
  if( $gc_background ) XtReleaseGC($,$gc_background);
  if( $gc_fg ) XtReleaseGC($,$gc_fg);
  TRACE(9,"destroy");
}

@proc expose
{
  XClearWindow( XtDisplay($), XtWindow($) );
  $slh=0; /* do not undraw slider */
  draw_slider($, $pos * $height );
}


@UTILITIES
@proc set_slider_pos($, int vis, int max, int first)
{
	$frac = ( vis * 1.0 / max );
	$pos  = first * 1.0 / max;
	int y = $height * $pos;
	draw_slider($,y);
	
}

@proc draw_slider($, int y)
{

	if(! XtIsRealized($) ) {

	     TRACE(9, "Widget is gone" );
	};

	/* compute new slider position (y) and size (h) */ 
	if( y < 0 ) y = 0;
        if( $frac <= 0 || $frac > 1 ) $frac = .1;	
	TRACE(9, "frac:%f y:%d", $frac,y );

        int h;
        h = $height * $frac;
        if( y+h > $height ) y = Max(0,$height-h);
	TRACE(9, "height:%d sl-height:%d top:%d", $height, h, y);
	if( y == $sly && $slh == h ) return;


	
	/* undraw old slider */
        if( $sly >= 0 && $slh > 0 ) {
             XFillRectangle(XtDisplay($), XtWindow($),$gc_background,
                             0,$sly,$width, $slh );
        }

	/* draw slider at Pos: (0,$sly) */
        $sly = y; $slh = h;
	TRACE(9, "height:%d sl-height:%d top:%d", $height, h, $sly);
        XFillRectangle(XtDisplay($), XtWindow($),$gc_fg,
                             0,$sly,$width, $slh );


	/* compute relative position 0..1 */		     
	float p = $sly * 1.0 / $height;
        if( p + $frac > 1.0 ) p = 1.0 - $frac;
        if( p < 0 ) p = 0;
        $pos = p;
}

@translations
@trans <Btn1Motion>: sl_motion()
@trans <Btn1Up>: sl_motion()
@trans <EnterWindow>: t1()
@trans <LeaveWindow>: t1()

@actions
@proc sl_motion
{
	static float p;
	int y = event->xbutton.y;
	TRACE(9, "%d", y );
        draw_slider($,y);
        XtCallCallbackList( $, $callback, (XtPointer) & ($pos) );	
	TRACE(9, "leave cb" );
}

@proc t1
{
	TRACE(9,"Hello");
}


@exports
@incl "mls.h"
@incl "converters.h"
