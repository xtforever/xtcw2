@class Wcombo (Wlabel)
@CLASSVARS
@ The Core variable |compress_exposure| is OR'ed with
|XtExposeGraphicsExpose|, in order to get graphics expose events delivered
to the |expose| method.
var compress_exposure = XtExposeCompressMultiple OR XtExposeGraphicsExpose
var compress_motion = True
@var visible_interest = False


@PUBLIC
@var <Callback> XtCallbackList combo_cb = NULL
@var <Callback> XtCallbackList refresh_list  = NULL
@var StringMArray lst = <String> "A,B,C"
@var int selection = -1
@var int lines_height = 10

@PRIVATE
@var Widget shell
@var Widget listbox
@var int entry_mode 
@var int filter
@var int f_lst
@var int k_lst

    
@TRANSLATIONS
@trans <Btn1Down>:     set_cursor() SetKeyboardFocus()
@trans <Key>Return:    CallOnEnter() notify()
@trans <Key>BackSpace: remove_char()
@trans <Key>:          insert_char()
@trans <FocusIn>:      focus_in() 
@trans <FocusOut>:     focus_out()


@METHODS



@proc initialize
{
    TRACE(2, "init %s", XtName($) );
	$shell = 0;
	$entry_mode=0;
	$filter = m_create(200,1);
	$f_lst = m_create(100,sizeof(char*) );
	$k_lst = m_create(100,sizeof(int) );
}

@proc destroy
{
	m_free( $filter );
	m_free( $f_lst  );
	m_free( $k_lst  ); 
}


@UTILITIES
@proc open_popup($)
{
    if( $entry_mode ) return;

    if( ! $shell ) {
	    $shell = XtCreatePopupShell ( "combo_shell", overrideShellWidgetClass,
                                  $, NULL, 0 );
    	    $listbox = XtVaCreateManagedWidget ( "combo-scrollbox", wlsWidgetClass,
				       $shell, NULL );
	    XtAddCallback($listbox, "callback", (XtCallbackProc)item_selected_cb, $ );
	    
	    XtRealizeWidget($shell);
	    static Atom wm_delete_window;
    	    wm_delete_window = XInternAtom(XtDisplay($), "WM_DELETE_WINDOW",
                                   False);
    	    (void) XSetWMProtocols (XtDisplay($), XtWindow($shell),
                            &wm_delete_window, 1);
	    
	}

	Position root_x, root_y;
	XtTranslateCoords($, 0, $height + $border_width, &root_x, &root_y);
	XtVaSetValues($shell, "x", (int) root_x, "y", (int) root_y, NULL );
	XtResizeWidget($shell, $width, $lines_height * $xftFont->height, 0 );
	m_clear($filter);
	$selection=-1;
	update_filter($);

	XtPopup($shell, XtGrabNone);
	$entry_mode=1;
}


@proc update_filter($)
{
    fwrite( m_buf($filter), m_len($filter),1,stdout); putchar(10);
    m_putc($filter,0); m_pop($filter);
    XtVaSetValues($, "label", m_str($filter), NULL );

    m_clear($f_lst); m_clear($k_lst);
    char **sp;
    int p;
    int n = m_len($filter);
    m_foreach($lst,p,sp) {
	if( strncasecmp( *sp, m_str($filter), n ) == 0 ) {
	    m_put( $f_lst, sp ); /* filtered list */
	    m_put( $k_lst, &p );  /* indicies */
	 }
    }

    XtVaSetValues($listbox, "lst", $f_lst, NULL );    
}

@proc  item_selected_cb(Widget dummy, $, void *class_data )
{

        int n = m_len($f_lst);
	int p = (intptr_t) class_data;
    	TRACE(2,"p=%d", p);

	if( p >= 0 && p < n ) {
	    $selection=INT($k_lst,p );
	    TRACE(2,"Wcombo:%s - sel:%d real_sel:%d", XtName($), p, $selection );
	    char *s = STR( $f_lst, p );
	    XtVaSetValues($, "label", s, NULL );
	}
	else $selection=-1;
	popdown_shell_notify_client($);
}

@proc  popdown_shell_notify_client($)
{
	XtPopdown($shell);
	$entry_mode=0;
	XtCallCallbackList( $, $combo_cb, (XtPointer) (intptr_t) $selection );
}


@ACTIONS

@ params: ($, XEvent *event _X_UNUSED, String *params _X_UNUSED, Cardinal *num_params _X_UNUSED)
@proc SetKeyboardFocus
{
    TRACE(2,"try to set keyboard focus");
    Widget shell, parent;

    shell = parent = $;
    while (parent) {
        if (XtIsShell(shell = parent))
            break;
        parent = XtParent(parent);
    }
    
    XtSetKeyboardFocus(shell, $);
}

	
@proc set_cursor
{
	if( $entry_mode ) return;
	TRACE(2,"open");
	XtCallCallbackList( $, $refresh_list, NULL );
	open_popup($);
}

@proc insert_char
{
    if( ! $entry_mode ) return;
    int len;
    unsigned char buf[32];
    KeySym key_sim;

    len = _XawLookupString($,(XKeyEvent *) event, (char*)buf,sizeof buf, &key_sim );
    if (len <= 0) return;
    TRACE(2,"ins %d %d", *buf, len);
    m_write( $filter, m_len($filter), buf, len );
    update_filter($);
    
}

@proc remove_char
{
	if( ! $entry_mode ) return;
	unsigned char ch;
	TRACE(2,"del");
	while( m_len($filter) ) {
	   ch = *(unsigned char*)m_pop($filter);
	   TRACE(2,"%x", ch );
	   if(  ((ch & 0xC0) != 0x80)  ) break;
	   /* loop while we see utf-8 continuation bytes */
	} 
    	update_filter($); 

}

@proc focus_in
{
	TRACE(2, "Wcombo %s got focus", XtName($));
	set_cursor($, NULL, NULL, NULL );
}

@proc focus_out
{
	TRACE(2, "Wcombo %s lost focus", XtName($));
	if( $entry_mode ) {
	    XtPopdown($shell);
	    $entry_mode=0;
	}
}

@proc notify
{
	TRACE(2, "Wcombo %s notify: entry_mode %d", XtName($), $entry_mode );
	item_selected_cb(NULL, $, (XtPointer)0 );	
}


@IMPORTS
@incl "mls.h"
@incl "converters.h"
@incl <X11/Shell.h>
@incl <X11/Xatom.h>
@incl <X11/Xft/Xft.h>
@incl "converters-xft.h"
@incl <X11/Xmu/Converters.h>
@incl <X11/Xaw/XawImP.h>
@incl <X11/Xaw/XawImP.h>
@incl <X11/Xft/Xft.h>
@incl <X11/Xmu/Converters.h>
@incl "xutil.h"
@incl "xtcw/Wls.h"
