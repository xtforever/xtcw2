phase		client		host1		host2		
INIT				   ->  REG
						<- REPLY
CLIENT
		name c1 -> host2				
						<- CLIENT c1,IP,PORT
		to: c1      ->    forward
				  to host2      send to c1



July 2020
server.name = host1

on-receive:
   msg=connect,127.0.0.1,5001
	connect-to(127.0.0.1,5001)
	send(register host1)
	
   msg=register,name
	get-sender, reply(register host2)
	



connection properties

- server socket
- connection list
- message forwarding


commands

- connect     127.0.0.1 50010
- connect     127.0.1.1 50011
- broadcast   BROADCAST IP/PORT MSG
- 


/* read data from socket conn_id, append new channels, close channels,... */
ev = handle_event(bus, conn_id)

/* append connection to connection list */
append_connection(bus, socket_fd);

/* remove connection from connection list */
remove_connection(bus, conn_id );

/* */
send_message( bus, conn_id );

/* */
msg = get_message( bus, conn_id );




struct nbus_ctx :     keeps track of connected clients
struct nbus_client:   client status


server

  int h = nbus_create( "socket" )
  - open tcp listen socket, create struct nbus_ctx and return handle
    to this struct
    

  nbus_poll_event(h)
  - call i_server_select( h, timeout) to poll events from server socket
  - wait max 300ms for event then return 0
  - if data arrived put data in client incomming queue (nbus_client.q)
  - use extract_mgs to copy bytes from incomming queue to
    message buffer (nbus_client.msg) (but only if buffer is incomplete)
  - if newline is received return CLIENT_REQ
    client id is stored in struct nbus_ctx.msg_from_id
    message is stored in struct nbus_client.msg
    
  - if the connection broke return CLIENT_EXIT
  
  
  
  nbus_msg(h)
  - get message from last client connection
  - use poll_msg(struct nbus_client*) to extract and free message from client
  
  
